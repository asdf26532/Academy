<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE log4j:configuration PUBLIC "-//APACHE//DTD LOG4J 1.2//EN" "log4j.dtd">
<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/">

	<!-- ※ 주의!!! src/test/resources의 log4j.xml가 우선 적용되므로 제거 후 진행 -->

	<!-- Appenders -->
	<!-- 로그 내용을 남길 대상 (기본 콘솔) -->
	<appender name="console" class="org.apache.log4j.ConsoleAppender">
		<param name="Target" value="System.out" />
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern" value="%-5p: %c - %m%n" />
		</layout>
	</appender>
	
	<!-- Application Loggers -->
	<!-- 개발자가 로그 확인을 위해 직접 지정한 패키지 -->
	<logger name="com.itbank.service">
		<level value="trace" />
	</logger>
	
	<!-- 3rdparty Loggers -->
	<logger name="org.springframework.core">
		<level value="info" />
	</logger>
	
	<logger name="org.springframework.beans">
		<level value="info" />
	</logger>
	
	<logger name="org.springframework.context">
		<level value="info" />
	</logger>

	<logger name="org.springframework.web">
		<level value="info" />
	</logger>


	<!-- Root Logger -->
	<!-- 개발자가 지정한 것 외의 로그 레벨 -->
	<root>
		<priority value="warn" />
		<appender-ref ref="console" />
	</root>
	
	<!-- 
		Log : 프로그램의 실행 행적을 기록하는 것
		- Spring에서 log4j라는 인터페이스를 주로 사용한다
		- System.out.println() 보다 성능이 좋고
		- 콘솔뿐만 아니라 파일 혹은 네트워크로 다른 위치에 로그를 남길 수 있다
		- 또한, 로그 레벨을 지정해서 특정 로그만 기록도 가능
		
		debug VS log
		- 예외나 에러 탐지는 디버그로 찾기 좋다
		- 서버가 구동 중엔 디버그를 할 수 없는 경우도 있다
		- 이러한 환경에서는 서버의 오작동을 로그로 남겨둔다
		
		Log Level
		1. Fatal		매우 심각한 에러로 프로그램이 종료되는 경우가 많다
		2. Error		의도하지 않은 에러가 발생한 경우
		3. Warn			에러가 될 수 있는 잠재적 요소
		4. Info			에러는 아니고 시스템 요구 사항을 확인하기 위한 용도
		5. Debug		Info보다 좀 더 상세한 정보를 확인하기 위한 용도
		6. Trace		Debug보다 좀 더 상세한 정보를 확인
	 -->
	
</log4j:configuration>
